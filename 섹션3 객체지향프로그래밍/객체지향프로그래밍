지금까지 개발한 음악 플레이어는 데이터와 기능이 분리되어 있었지만, 이제 이를 하나의 클래스에 통합하여 음악 플레이어라는 객체를 완전하게 구현할 것이다.
프로그램의 실행 순서보다 음악 플레이어 클래스 자체를 만드는 데 초점을 맞추고, 이 클래스가 어떤 속성(데이터)과 기능(메서드)을 가질지 설계에 집중한다.
이를 통해 음악 플레이어를 만드는 개발자와 사용하는 개발자를 분리하여, 객체 지향적인 설계를 구현한다.

캡슐화는 객체 지향 프로그래밍에서 속성(데이터)과 기능(메서드)을 하나로 묶고, 필요한 기능만 메서드를 통해 외부에 제공하는 것을 의미한다. 
예를 들어, MusicPlayer 객체의 내부 데이터(volume, isOn)는 외부에서 직접 접근할 수 없고, 제공된 메서드를 통해서만 사용된다.
이를 통해 객체를 사용하는 개발자는 내부 구현을 알 필요 없이 필요한 기능만 활용할 수 있다.

캡슐화의 이점은 다음과 같다:
속성과 기능이 한곳에 모여 있어 코드 변경이 쉽다. 예를 들어, volume의 이름이나 내부 동작이 바뀌어도 객체 외부의 코드는 영향을 받지 않는다.
객체 사용이 직관적이며 친숙하게 느껴진다.
코드가 읽기 쉬워지고 유지보수성이 향상된다.
다만, 객체가 제공하는 메서드의 이름이나 동작이 변경되면 이를 사용하는 외부 코드도 수정이 필요할 수 있다.







