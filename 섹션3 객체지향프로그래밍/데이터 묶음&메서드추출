각각의 기능을 메서드로 만든 덕분에 각각의 기능이 모듈화 되었다. 덕분에 다음과 같은 장점이 생겼다.

중복 제거:로직 중복이 제거되었다. 같은 로직이 필요하면 해당 메서드를 여러번 호출하면 된다.

변경 영향 범위:기능을 수정할 때 해당 메서드 내부만 변경하면 된다.

메서드 이름 추가:메서드 이름을 통해 코드를 더 쉽게 이해할 수 있다.

모듈화: 쉽게 이야기해서 레고 블럭을 생각하면 된다. 필요한 블럭을 가져다 꼽아서 사용할 수 있다.

절차 지향 프로그래밍의 한계는 데이터와 기능이 분리되어 있어 유지보수가 어렵다는 점이다. 
예를 들어, 음악 플레이어에서 데이터(MusicPlayerData)와 그 데이터를 처리하는 기능(MusicPlayerMain3)이 각각 분리되어 있어,데이터 변경 시 관련 메서드도 수정해야 한다. 
이는 관리 포인트가 늘어나 유지보수에 비효율적이다. 객체 지향 프로그래밍은 데이터와 기능을 하나로 묶어 이러한 문제를 해결하며, 코드의 가독성과 유지보수성을 크게 개선한다.
