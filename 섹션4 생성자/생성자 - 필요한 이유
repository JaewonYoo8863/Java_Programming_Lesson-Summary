반복적으로 초기값을 설정하는 코드를 개선하려면, **생성자(Constructor)**를 사용하는 것이 좋다.
생성자는 객체를 생성하는 시점에 특정 작업(예: 초기화)을 자동으로 수행하도록 해준다. 이를 통해 초기화 로직을 객체의 속성과 함께 묶어 객체 지향적인 설계를 강화할 수 있다.

기존 코드 문제점 요약:
객체를 생성한 후 초기값을 설정하는 코드가 반복됨.
초기화 작업이 객체 외부에 있어, 객체를 사용하는 코드가 불필요하게 복잡함.
객체의 속성과 초기화 기능이 분리되어 있어 관리가 어려움.
메서드로 개선한 코드
java
코드 복사
static void initMember(MemberInit member, String name, int age, int grade) {
    member.name = name;
    member.age = age;
    member.grade = grade;
}
이 코드는 반복을 제거했지만, 초기화 작업이 여전히 객체 외부에 있으며, 객체 내부에서 초기화하는 방식이 더 나은 설계임.

생성자를 사용한 개선된 코드
java
코드 복사
package construct;

public class MemberInit {
    String name;
    int age;
    int grade;

    // 생성자
    public MemberInit(String name, int age, int grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }
}

package construct;

public class MethodInitMain {
    public static void main(String[] args) {
        // 생성자를 사용해 초기화
        MemberInit member1 = new MemberInit("user1", 15, 90);
        MemberInit member2 = new MemberInit("user2", 16, 80);

        MemberInit[] members = {member1, member2};
        for (MemberInit s : members) {
            System.out.println("이름:" + s.name + " 나이:" + s.age + " 성적:" + s.grade);
        }
    }
}
생성자를 사용한 장점:
객체 생성과 초기화가 한 번에 이루어져 코드가 간결해짐.
초기화 로직이 객체 내부로 이동하여 캡슐화가 강화됨.
객체 생성 시 필요한 속성을 명확히 전달받아, 잘못된 초기화 가능성을 줄임.
코드의 유지보수와 가독성이 향상됨.
결론: 생성자는 객체 지향 프로그래밍에서 객체 초기화를 더욱 효율적으로 처리하며, 데이터와 기능을 통합하는 데 도움을 준다.
